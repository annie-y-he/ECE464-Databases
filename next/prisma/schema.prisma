// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  uid          String        @id @default(uuid())
  password     String
  dob          DateTime
  email        String        @unique
  uname        String
  first_name   String
  last_name    String
  role         String        @default("reader")
  publications publication[]
  userFollows  userFollows[]
}

model publication {
  pid String @id @default(uuid())

  bid     String
  edition String
  book    book   @relation(fields: [bid], references: [bid])

  sid    String?
  psid   String
  series series? @relation(fields: [sid], references: [sid])

  uid  String?
  user user?   @relation(fields: [uid], references: [uid])

  cid       String?
  year      String
  publisher publisher? @relation(fields: [cid], references: [cid])

  isbn  String
  file  String
  cover String

  authWritesPub authWritesPub[]
  pubInLang     pubInLang[]

  @@unique([bid, edition])
}

model book {
  bid            String           @id @default(uuid())
  bname          String           @unique
  description    String
  bookHasTag     bookHasTag[]
  authWritesBook authWritesBook[]
  publications   publication[]
}

model tag {
  tid        String       @id @default(uuid())
  tname      String       @unique
  bookHasTag bookHasTag[]
}

model series {
  sid          String        @id @default(uuid())
  sname        String        @unique
  publications publication[]
}

model author {
  aid            String           @id @default(uuid())
  aname          String           @unique
  description    String
  dob            String
  authWritesPub  authWritesPub[]
  authWritesBook authWritesBook[]
}

model publisher {
  cid          String        @id @default(uuid())
  pname        String        @unique
  publications publication[]
}

model language {
  lid       String      @id @default(uuid())
  lname     String      @unique
  pubInLang pubInLang[]
}

model bookHasTag {
  bid  String
  tid  String
  book book   @relation(fields: [bid], references: [bid])
  tag  tag    @relation(fields: [tid], references: [tid])

  @@id([bid, tid])
}

model authWritesPub {
  aid         String
  pid         String
  role        String
  author      author      @relation(fields: [aid], references: [aid])
  publication publication @relation(fields: [pid], references: [pid])

  @@id([aid, pid])
}

model authWritesBook {
  aid    String
  bid    String
  role   String
  author author @relation(fields: [aid], references: [aid])
  book   book   @relation(fields: [bid], references: [bid])

  @@id([aid, bid])
}

model pubInLang {
  pid         String
  lid         String
  publication publication @relation(fields: [pid], references: [pid])
  language    language    @relation(fields: [lid], references: [lid])

  @@id([pid, lid])
}

model userFollows {
  uid  String
  fid  String
  type String
  user user   @relation(fields: [uid], references: [uid])

  @@id([uid, fid, type])
}
